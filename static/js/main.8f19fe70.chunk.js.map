{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleSearchText","type","onChange","App","fetchUsers","url","a","fetch","resp","json","data","setState","event","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,mCAAOL,EAAMG,QAAQG,KAArB,OACA,kCAAMN,EAAMG,QAAQI,MAApB,WCHKC,EAAW,SAACR,GAErB,OACI,qBAAKC,UAAW,YAAhB,SAEID,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPtBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,iBAAd,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAeA,EACfG,SAAWF,MCsEAG,E,kDApEb,aAAe,IAAD,8BACZ,gBAaFC,WAdc,uCAcD,WAAOC,GAAP,iBAAAC,EAAA,sEACQC,MAAMF,GADd,cACLG,EADK,gBAEQA,EAAKC,OAFb,OAELC,EAFK,OAGX,EAAKC,SAAS,CACZf,SAASc,IAJA,2CAdC,wDAsBdV,iBAAmB,SAACY,GAElB,EAAKD,SAAS,CACZE,YAAYD,EAAME,OAAOC,SAtB3B,EAAKC,MAAQ,CACXpB,SAAS,GACTiB,YAAY,IALF,E,qDAoCd,WACEI,KAAKb,WAzCG,gD,oBA4CV,WAAU,IAAD,EAE0Ba,KAAKD,MAA9BpB,EAFD,EAECA,SAASiB,EAFV,EAEUA,YACXK,EAAmBtB,EAASuB,QAAO,SAAA7B,GACvC,OAAOA,EAAQG,KAAK2B,cAAcC,SAASR,EAAYO,kBAGzD,OACE,sBAAKhC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEY,iBAAmBiB,KAAKjB,iBACxBD,YAAY,oBAGd,cAAC,EAAD,CACEH,SAAWsB,W,GA1DHI,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f19fe70.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2> { props.monster.name } </h2>\r\n        <p> { props.monster.email } </p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    // console.log(props);\r\n    return (\r\n        <div className= \"card-list\">\r\n            { \r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder,handleSearchText}) => (\r\n    <input\r\n    className=\"search\" \r\n    type=\"search\" \r\n    placeholder= { placeholder }\r\n    onChange={ handleSearchText } \r\n  />\r\n)","// import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nconst url = 'https://jsonplaceholder.typicode.com/users';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters:[],\n      searchField:'',\n    };\n\n    // if we defined the function outside constructor without using the arrow function like :\n    //handleSearchText(){...}\n    //we have to bind the this keyword to it so it point on the state of our constructor text\n    // this.handleSearchText = this.handleSearchText.bind(this);\n  }\n\n  fetchUsers = async (url) => {\n    const resp = await fetch(url);\n    const data = await resp.json();\n    this.setState({\n      monsters:data\n    })\n  }\n\n  handleSearchText = (event) => {\n    // console.log(this);\n    this.setState({\n      searchField:event.target.value\n    }\n    //,()=>console.log(this.state.searchField)\n    );\n    \n    //This is will console log 1 step behind because the setState is asynchronus code and not synchronous and in order to get the state after it's done we have to do it in the callback function of the setState\n\n    //console.log(this.state.searchField)\n  }\n  \n  //It will be called after react is mounted \n  componentDidMount() {\n    this.fetchUsers(url);\n  }\n\n  render() {\n    \n    const { monsters,searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox \n          handleSearchText={ this.handleSearchText} \n          placeholder='search monsters' \n        />\n\n        <CardList \n          monsters={ filteredMonsters }\n        > \n          {/* This is a children props  */}\n          {/* <h1>This is a children of the CardList component that can be called using props.children</h1> */}\n        </CardList>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App; \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}